#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab5_Hotel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LR5")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertHotels(Hotels instance);
    partial void UpdateHotels(Hotels instance);
    partial void DeleteHotels(Hotels instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Lab5_Hotel.Properties.Settings.Default.LR5ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Client
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Hotels> Hotels
		{
			get
			{
				return this.GetTable<Hotels>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _fio;
		
		private System.Nullable<int> _num;
		
		private System.Nullable<int> _age;
		
		private string _country;
		
		private string _ofhotel;
		
		private int _id;
		
		private EntityRef<Client> _Client2;
		
		private EntityRef<Client> _Client1;
		
		private EntityRef<Hotels> _Hotels;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfioChanging(string value);
    partial void OnfioChanged();
    partial void OnnumChanging(System.Nullable<int> value);
    partial void OnnumChanged();
    partial void OnageChanging(System.Nullable<int> value);
    partial void OnageChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnofhotelChanging(string value);
    partial void OnofhotelChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Client()
		{
			this._Client2 = default(EntityRef<Client>);
			this._Client1 = default(EntityRef<Client>);
			this._Hotels = default(EntityRef<Hotels>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fio", DbType="VarChar(50)")]
		public string fio
		{
			get
			{
				return this._fio;
			}
			set
			{
				if ((this._fio != value))
				{
					this.OnfioChanging(value);
					this.SendPropertyChanging();
					this._fio = value;
					this.SendPropertyChanged("fio");
					this.OnfioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num", DbType="Int")]
		public System.Nullable<int> num
		{
			get
			{
				return this._num;
			}
			set
			{
				if ((this._num != value))
				{
					this.OnnumChanging(value);
					this.SendPropertyChanging();
					this._num = value;
					this.SendPropertyChanged("num");
					this.OnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int")]
		public System.Nullable<int> age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="VarChar(15)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ofhotel", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ofhotel
		{
			get
			{
				return this._ofhotel;
			}
			set
			{
				if ((this._ofhotel != value))
				{
					if (this._Hotels.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnofhotelChanging(value);
					this.SendPropertyChanging();
					this._ofhotel = value;
					this.SendPropertyChanged("ofhotel");
					this.OnofhotelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._Client1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client", Storage="_Client2", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public Client Client2
		{
			get
			{
				return this._Client2.Entity;
			}
			set
			{
				Client previousValue = this._Client2.Entity;
				if (((previousValue != value) 
							|| (this._Client2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client2.Entity = null;
						previousValue.Client1 = null;
					}
					this._Client2.Entity = value;
					if ((value != null))
					{
						value.Client1 = this;
					}
					this.SendPropertyChanged("Client2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client", Storage="_Client1", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public Client Client1
		{
			get
			{
				return this._Client1.Entity;
			}
			set
			{
				Client previousValue = this._Client1.Entity;
				if (((previousValue != value) 
							|| (this._Client1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client1.Entity = null;
						previousValue.Client2 = null;
					}
					this._Client1.Entity = value;
					if ((value != null))
					{
						value.Client2 = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("Client1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotels_Client", Storage="_Hotels", ThisKey="ofhotel", OtherKey="hname", IsForeignKey=true)]
		public Hotels Hotels
		{
			get
			{
				return this._Hotels.Entity;
			}
			set
			{
				Hotels previousValue = this._Hotels.Entity;
				if (((previousValue != value) 
							|| (this._Hotels.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotels.Entity = null;
						previousValue.Client.Remove(this);
					}
					this._Hotels.Entity = value;
					if ((value != null))
					{
						value.Client.Add(this);
						this._ofhotel = value.hname;
					}
					else
					{
						this._ofhotel = default(string);
					}
					this.SendPropertyChanged("Hotels");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hotels")]
	public partial class Hotels : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _hname;
		
		private string _hcountry;
		
		private string _hcity;
		
		private System.Nullable<int> _stars;
		
		private EntitySet<Client> _Client;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnhnameChanging(string value);
    partial void OnhnameChanged();
    partial void OnhcountryChanging(string value);
    partial void OnhcountryChanged();
    partial void OnhcityChanging(string value);
    partial void OnhcityChanged();
    partial void OnstarsChanging(System.Nullable<int> value);
    partial void OnstarsChanged();
    #endregion
		
		public Hotels()
		{
			this._Client = new EntitySet<Client>(new Action<Client>(this.attach_Client), new Action<Client>(this.detach_Client));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hname", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string hname
		{
			get
			{
				return this._hname;
			}
			set
			{
				if ((this._hname != value))
				{
					this.OnhnameChanging(value);
					this.SendPropertyChanging();
					this._hname = value;
					this.SendPropertyChanged("hname");
					this.OnhnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hcountry", DbType="VarChar(15)")]
		public string hcountry
		{
			get
			{
				return this._hcountry;
			}
			set
			{
				if ((this._hcountry != value))
				{
					this.OnhcountryChanging(value);
					this.SendPropertyChanging();
					this._hcountry = value;
					this.SendPropertyChanged("hcountry");
					this.OnhcountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hcity", DbType="VarChar(15)")]
		public string hcity
		{
			get
			{
				return this._hcity;
			}
			set
			{
				if ((this._hcity != value))
				{
					this.OnhcityChanging(value);
					this.SendPropertyChanging();
					this._hcity = value;
					this.SendPropertyChanged("hcity");
					this.OnhcityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stars", DbType="Int")]
		public System.Nullable<int> stars
		{
			get
			{
				return this._stars;
			}
			set
			{
				if ((this._stars != value))
				{
					this.OnstarsChanging(value);
					this.SendPropertyChanging();
					this._stars = value;
					this.SendPropertyChanged("stars");
					this.OnstarsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotels_Client", Storage="_Client", ThisKey="hname", OtherKey="ofhotel")]
		public EntitySet<Client> Client
		{
			get
			{
				return this._Client;
			}
			set
			{
				this._Client.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Client(Client entity)
		{
			this.SendPropertyChanging();
			entity.Hotels = this;
		}
		
		private void detach_Client(Client entity)
		{
			this.SendPropertyChanging();
			entity.Hotels = null;
		}
	}
}
#pragma warning restore 1591
